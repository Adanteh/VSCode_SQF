{
  "fileTypes": [
    "ts"
  ],
  "name": "sqf",
  "patterns": [{"include": "#expression"}],
  "repository": {
    "access-modifier": {
      "match": "\\b(private)\\b",
      "name": "storage.modifier.sqf"
    },
    "manipulative-operator": {
      "match": "\\*|/|\\-|\\+|%|\\^|plus|\\%",
      "name": "keyword.operator.manipulative.sqf"
    },
    "assignment-operator": {
      "match": "=",
      "name": "keyword.operator.assignment.sqf"
    },
    "comparison-operator": {
      "match": "==|!=|>|<|greater|greater=|less|less=",
      "name": "keyword.operator.comparison.sqf"
    },
    "condition-operator": {
      "match": "!|&&|\\|\\||:|or",
      "name": "keyword.operator.condition.sqf"
    },
    "array-literal": {
      "begin": "\\[",
      "beginCaptures": {
        "0": { "name": "meta.brace.square.sqf" }
      },
      "end": "\\]",
      "endCaptures": {
        "0": { "name": "meta.brace.square.sqf" }
      },
      "name": "meta.array.literal.sqf",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "name": "meta.block.sqf",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#object-member"
        }
      ]
    },
    "boolean-literal": {
      "match": "\\b(false|true)\\b",
      "name": "constant.language.boolean.sqf"
    },
    "comment": {
      "name": "comment.sqf",
      "patterns": [
        {
          "include": "#comment-block-doc"
        },
        {
          "include": "#comment-block"
        },
        {
          "include": "#comment-line"
        }
      ]
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.sqf"
    },
    "comment-block-doc": {
      "begin": "/\\*\\*(?!/)",
      "end": "\\*/",
      "name": "comment.block.documentation.sqf"
    },
    "comment-line": {
      "match": "(//).*$\\n?",
      "name": "comment.line.sqf"
    },
    "control-statement": {
      "match": "\\b(then|do|else|exitWith|call|spawn|execVM|for|if|return|switch|while|from|to|step)\\b",
      "name": "keyword.control.sqf"
    },
    "decl-block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "name": "meta.decl.block.sqf",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "declaration": {
      "name": "meta.declaration.sqf",
      "patterns": [
        {"include": "#fnc-declaration"},
        {"include": "#fnc-call"}
      ]
    },
    "expression": {
      "name": "meta.expression.sqf",
      "patterns": [
        {"include": "#string"},
        {"include": "#template"},
        {"include": "#comment"},
        {"include": "#literal"},
        {"include": "#paren-expression"},
        {"include": "#var-expr"},
        {"include": "#declaration"},
        {"include": "#block"},
        {"include": "#comparison-operator"},
        {"include": "#condition-operator"},
        {"include": "#manipulative-operator"},
        {"include": "#assignment-operator"},
        {"include": "#storage-keyword"},
        {"include": "#control-statement"},
        {"include": "#switch-case"}
      ]
    },
    "field-declaration": {
      "begin": "(?<!\\()\\s*\\b([a-zA-Z_$][\\w$]*)\\s*(\\?\\s*)?(?=(=|:))",
      "beginCaptures": {
        "1": {
          "name": "variable.sqf"
        },
        "2": {
          "name": "keyword.operator.sqf"
        }
      },
      "end": "(?=\\}|;|,|\\n)|(?<=\\})",
      "name": "meta.field.declaration.sqf",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "indexer-parameter": {
      "captures": {
        "1": {
          "name": "variable.parameter.sqf"
        }
      },
      "match": "([a-zA-Z_$][\\w$]*)(?=\\:)",
      "name": "meta.indexer.parameter.sqf"
    },
    "literal": {
      "name": "literal.sqf",
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#this-literal"
        }
      ]
    },
    "null-literal": {
      "match": "\\b(null|nil)\\b",
      "name": "constant.language.null.sqf"
    },
    "numeric-literal": {
      "match": "\\b(?<=[^$])((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
      "name": "constant.numeric.sqf"
    },
    "object-body": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "name": "meta.object.body.sqf",
      "patterns": [
        {"include": "#comment"},
        {"include": "#field-declaration"},
        {"include": "#type-annotation"},
        {"include": "#variable-initializer"},
        {"include": "#access-modifier"},
        {"include": "#property-accessor"}
      ]
    },
    "fnc-declaration": {
      "begin": "([a-zA-Z_$][\\w$]*)\\b(\\s*)=(\\s*){",
      "beginCaptures": {
        "1": { "name": "entity.name.class.sqf" },
        "2": { "name": "keyword.operator.assignment.sqf" }
      },
      "end": " |;|{|}",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.sqf"
        }
      },
      "name": "meta.declaration.object.sqf"
    },
    "fnc-call": {
      "begin": "(call|spawn)(\\s+[a-zA-Z_$][\\w$]*)",
      "beginCaptures": {
        "1": { "name": "keyword.control.sqf" },
        "2": { "name": "entity.name.class.sqf" }
      },
      "end": " |;|{|}",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.sqf"
        }
      },
      "name": "meta.declaration.object.sqf"
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": { "name": "meta.brace.paren.sqf" }
      },
      "end": "\\)",
      "endCaptures": {
        "0": { "name": "meta.brace.paren.sqf" }
      },
      "patterns": [
        { "include": "#expression" }
      ]
    },
    "property-accessor": {
      "match": "\\b(get|set)\\b",
      "name": "storage.type.property.sqf"
    },
    "qstring-double": {
      "begin": "\"",
      "end": "\"|(?=$)",
      "name": "string.double.sqf",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "begin": "'",
      "end": "'|(?=$)",
      "name": "string.single.sqf",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "storage-keyword": {
      "match": "\\b(number|boolean|string|var|let|function|const)\\b",
      "name": "storage.type.sqf"
    },
    "string": {
      "name": "string.sqf",
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        }
      ]
    },
    "string-character-escape": {
      "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)",
      "name": "constant.character.escape"
    },
    "switch-case": {
      "begin": "\\b(case|default)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.sqf"
        }
      },
      "end": ":",
      "name": "case.expr.sqf",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "template": {
      "begin": "`",
      "beginCaptures": {
        "0": {
          "name": "string.template.sqf"
        }
      },
      "end": "`",
      "endCaptures": {
        "0": {
          "name": "string.template.sqf"
        }
      },
      "name": "meta.template.sqf",
      "patterns": [
        {
          "include": "#template-substitution-element"
        },
        {
          "include": "#template-string-contents"
        }
      ]
    },
    "template-string-contents": {
      "begin": ".*?",
      "end": "(?=(\\$\\{|`))",
      "name": "string.template.sqf",
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "this-literal": {
      "match": "\\b(this)\\b",
      "name": "constant.language.this.sqf"
    },
    "type": {
      "name": "meta.type.sqf",
      "patterns": [
        {
          "include": "#type-primitive"
        },
        {
          "include": "#type-parameters"
        },
        {
          "include": "#type-object"
        },
        {
          "include": "#type-operator"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "type-annotation": {
      "begin": ":",
      "end": "(?=$|[,);\\}\\]]|//)|(?==[^>])|(?<=[\\}>\\]\\)]|[a-zA-Z_$])\\s*(?=\\{)",
      "name": "meta.type.annotation.sqf",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "type-name": {
      "captures": {
        "1": {
          "name": "entity.name.type.sqf"
        }
      },
      "match": "[a-zA-Z_$][.\\w$]*",
      "name": "meta.type.name.sqf"
    },
    "type-object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.sqf"
        }
      },
      "name": "meta.object.type.sqf",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#type-annotation"
        }
      ]
    },
    "type-operator": {
      "match": "[.|]",
      "name": "keyword.operator.type.sqf"
    },
    "type-parameters": {
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.angle.sqf"
        }
      },
      "end": "(?=$)|(>)",
      "endCaptures": {
        "2": {"name": "meta.brace.angle.sqf"}
      },
      "name": "meta.type.parameters.sqf",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type"
        }
      ]
    }
  },
  "scopeName": "source.sqf"
}